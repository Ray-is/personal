// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux8Way.hdl
/**
 * 8-way demultiplexor:
 * [a, b, c, d, e, f, g, h] = [in, 0, 0, 0, 0, 0, 0, 0] if sel == 000
 *                            [0, in, 0, 0, 0, 0, 0, 0] if sel == 001
 *                            ...
 *                            [0, 0, 0, 0, 0, 0, 0, in] if sel == 111
 */
CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    // a = 1 if sel == 000 and in == 1 else 0
	// b = 1 if sel == 001 and in == 1 else 0
	// c = 1 if sel == 010 and in == 1 else 0
	// d = 1  if sel == 011 and in == 1 else 0
	// e = 1 if sel == 100 and in == 1 else 0
	// f = 1 if sel == 101 and in == 1 else 0
	// g = 1 if sel == 110 and in == 1 else 0
	// h = 1  if sel == 111 and in == 1 else 0
	
	Not (in=sel[0], out=nots0);
	Not (in=sel[1], out=nots1);
	Not (in=sel[2], out=nots2);
	
	And (a=nots0, b=nots1, out=tempA);
	And (a=tempA, b=nots2, out=selA);
	And (a=selA, b=in, out=a); // a
	
	And (a=nots1, b=nots2, out=tempB);
	And (a=tempB, b=sel[0], out=selB);
	And (a=selB, b=in, out=b); // b
	
	And (a=nots0, b=nots2, out=tempC);
	And (a=tempC, b=sel[1], out=selC);
	And (a=selC, b=in, out=c); // c
	
	And (a=sel[0], b=sel[1], out=tempD);
	And (a=tempD, b=nots2, out=selD);
	And (a=selD, b=in, out=d); // d
	
	And (a=nots0, b=nots1, out=tempE);
	And (a=tempE, b=sel[2], out=selE);
	And (a=selE, b=in, out=e); // e
	
	And (a=sel[0], b=sel[2], out=tempF);
	And (a=tempF, b=nots1, out=selF);
	And (a=selF, b=in, out=f); // f
	
	And (a=sel[1], b=sel[2], out=tempG);
	And (a=tempG, b=nots0, out=selG);
	And (a=selG, b=in, out=g); // g
	
	And (a=sel[0], b=sel[1], out=tempH);
	And (a=tempH, b=sel[2], out=selH);
	And (a=selH, b=in, out=h); // h
}